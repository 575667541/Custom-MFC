#pragma once
#include "afxwin.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Description	:	适用于TCP协议的流式套接字类
//	Version		:	version 1.0.0.1
//	Author		:	徐贤森
//	Data		:	2014-02-18
//////////////////////////////////////////////////////////////////////////////////////////////////////////
class CStreamSocket
{
public:
	CStreamSocket(void);
	virtual ~CStreamSocket(void);

protected:
	SOCKET		m_hSocket;

public:
	// ====================================================================================================
	// Purpose	:	在构造函数之后，创建套接字
	// Return	:	成功，返回TRUE；失败，返回FALSE
	// ====================================================================================================
	BOOL Create(UINT nSocketPort = 0, LPCTSTR lpszSocketAddress = NULL);

public:
	// ====================================================================================================
	// Purpose	:	应答连接请求
	// Return	:	成功，返回TRUE；失败，返回FALSE
	// ====================================================================================================
	BOOL Accept(CStreamSocket& rConnectedSocket, SOCKADDR* lpSockAddr = NULL, int* lpSockAddrLen = NULL);

	// ====================================================================================================
	// Purpose	:	绑定套接字
	// Return	:	成功，返回TRUE；	失败，返回FALSE
	// ====================================================================================================
	BOOL Bind(UINT nSocketPort, LPCTSTR lpszSocketAddress);

	// ====================================================================================================
	// Purpose	:	绑定套接字
	// Return	:	成功，返回TRUE；	失败，返回FALSE
	// ====================================================================================================
	BOOL Bind(const SOCKADDR* lpSockAddr, int nSockAddrLen);

	// ====================================================================================================
	// Purpose	:	关闭套接字
	// Return	:	成功，返回TRUE；	失败，返回FALSE
	// ====================================================================================================
	BOOL Close(void);

	// ====================================================================================================
	// Purpose	:	非阻塞发送连接请求
	// Return	:	成功，返回TRUE；	失败，返回FALSE
	// ====================================================================================================
	BOOL Connect(LPCTSTR lpszHostAddress, UINT nHostPort);

	// ====================================================================================================
	// Purpose	:	发送连接请求
	// Return	:	成功，返回TRUE；	失败，返回FALSE
	// ====================================================================================================
	BOOL Connect(const SOCKADDR* lpSockAddr, int nSocketAddrLen);

	// ====================================================================================================
	// Purpose	:	监听连接请求
	// Return	:	成功，返回TRUE；	失败，返回FALSE
	// ====================================================================================================
	BOOL Listen(int nConnectionBacklog = 5);

	// ====================================================================================================
	// Purpose	:	接收数据
	// Return	:	成功，返回接收到的字节数；	当连接关闭时，返回0；		失败，返回SOCKET_ERROR
	// ====================================================================================================
	int Receive(LPVOID lpBuf, int nBufLen, int nFlags = 0);

	// ====================================================================================================
	// Purpose	:	发送数据
	// Return	:	成功，返回已发送的字节数；	失败，返回SOCKET_ERROR
	// ====================================================================================================
	int Send(const LPVOID lpBuf, int nBufLen, int nFlags = 0);

	// ====================================================================================================
	// Purpose	:	关闭套接字的发送端、接收端或收发端
	// Return	:	成功，返回TRUE；失败，返回FALSE
	// ====================================================================================================
	BOOL ShutDown(int nHow = 2);

public:
	// ====================================================================================================
	// Purpose	:	获取最近产生的错误
	// Return	:	成功，返回TRUE；失败，返回FALSE
	// ====================================================================================================
	static int PASCAL GetLastError(void);

	// ====================================================================================================
	// Purpose	:	获取套接字属性
	// Return	:	成功，返回TRUE；	失败，返回FALSE
	// ====================================================================================================
	BOOL GetSockOpt(int nOptionName, LPVOID lpOptionValue, int* lpOptionLen, int nLevel = SOL_SOCKET);

	// ====================================================================================================
	// Purpose	:	设置套接字属性
	// Return	:	成功，返回TRUE；	失败，返回FALSE
	// ====================================================================================================
	BOOL SetSockOpt(int nOptionName, const LPVOID lpOptionValue, int nOptionLen, int nLevel = SOL_SOCKET);

protected:
	// ====================================================================================================
	// Purpose	:	CString转换为PSZ
	// ====================================================================================================
	int CStringToPSZ(CString str, char* ptr);	

public:
	// ====================================================================================================
	// Purpose	:	获取主机地址
	// ====================================================================================================
	void GetHostAddr(CString& strIP);

	//	关联SOCKET句柄
	BOOL Attach(SOCKET hSocket);

	//	分离SOCKET句柄
	SOCKET Detach(void);

	// CString类型的IP转换为DWORD类型的IP
	DWORD CStringToDWordIP(CString strIP);

	// DWORD类型的IP转换为CString类型的IP
	CString DWordToCStringIP(DWORD dwIP);
};

